"""
Project Euler Problem 94: Almost equilateral triangles

Problem:
An "almost equilateral triangle" has two equal sides, and the third side differs by no more than one unit. Find the sum of the perimeters of all such triangles with integral side lengths and area, whose perimeters do not exceed one billion.

Solution Idea:
We are looking for triangles with sides (a, a, a-1) or (a, a, a+1).

1.  **Area Condition**: For the area to be an integer, the height must be rational. Using the Pythagorean theorem on the half-triangle, `h^2 + (b/2)^2 = a^2`. For `h` to be rational, `4a^2 - b^2` must be a perfect square.

2.  **Case 1: Sides (a, a, a-1)**
    - Perimeter `P = 3a - 1`.
    - We need `4a^2 - (a-1)^2 = 3a^2 + 2a - 1 = (3a-1)(a+1)` to be a perfect square.
    - Let `X = 3a+1`. This can be transformed into the Pell-type equation `X^2 - 3y^2 = 4`.

3.  **Case 2: Sides (a, a, a+1)**
    - Perimeter `P = 3a + 1`.
    - We need `4a^2 - (a+1)^2 = 3a^2 - 2a - 1 = (3a+1)(a-1)` to be a perfect square.
    - Let `X = 3a-1`. This also transforms into the Pell-type equation `X^2 - 3y^2 = 4`.

4.  **Solving the Pell-type Equation**:
    - The solutions `(X_k)` to `X^2 - 3y^2 = 4` can be generated by the linear recurrence relation `X_k = 4 * X_{k-1} - X_{k-2}` with initial values `X_0 = 2` and `X_1 = 4`.
    - For each solution `X_k`, we check if it corresponds to an integer side `a` in either of our two cases.
        - Case 1: `a = (X_k - 1) / 3`. This requires `X_k ≡ 1 (mod 3)`. The perimeter is `P = 3a - 1 = X_k - 2`.
        - Case 2: `a = (X_k + 1) / 3`. This requires `X_k ≡ 2 (mod 3)`. The perimeter is `P = 3a + 1 = X_k + 2`.

5.  **Algorithm**:
    - Generate the sequence `X_k` using the recurrence.
    - For each `X_k`, check if it yields a valid integer `a` for either case.
    - If it does, calculate the corresponding perimeter.
    - If the perimeter is within the one billion limit, add it to a running total.
    - Stop when the generated perimeters exceed the limit.
"""

def solve():
    """
    Finds the sum of the perimeters of all almost equilateral triangles
    with integral side lengths and area and whose perimeters do not
    exceed one billion.
    """
    limit = 1_000_000_000
    total_perimeter_sum = 0
    
    x_prev, x_curr = 2, 4  # Initial values for the recurrence X_k = 4*X_{k-1} - X_{k-2}
    
    while True:
        # Case 2 check: a = (X+1)/3, P = X+2
        if (x_curr + 1) % 3 == 0:
            a = (x_curr + 1) // 3
            # Check for non-degenerate triangle (a > 1)
            if a > 1:
                perimeter = 3 * a + 1
                if perimeter > limit:
                    break # Since perimeters are increasing, we can stop
                total_perimeter_sum += perimeter

        # Case 1 check: a = (X-1)/3, P = X-2
        elif (x_curr - 1) % 3 == 0:
            a = (x_curr - 1) // 3
            # Check for non-degenerate triangle (a > 1)
            if a > 1:
                perimeter = 3 * a - 1
                if perimeter > limit:
                    break
                total_perimeter_sum += perimeter
        
        # Generate next term in the sequence
        x_next = 4 * x_curr - x_prev
        x_prev, x_curr = x_curr, x_next
        
    return total_perimeter_sum

if __name__ == "__main__":
    print(solve())
