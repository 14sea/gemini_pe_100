"""
Project Euler Problem 45: Triangular, pentagonal, and hexagonal

Problem:
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle:   Tn = n(n+1)/2      1, 3, 6, 10, 15, ...
Pentagonal: Pn = n(3n−1)/2     1, 5, 12, 22, 35, ...
Hexagonal:  Hn = n(2n−1)       1, 6, 15, 28, 45, ...

It can be verified that T_285 = P_165 = H_143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

Solution Idea:
We are looking for a number `x` that is present in all three sequences.

1.  **Key Insight**: A crucial observation is the relationship between hexagonal and triangular numbers.
    - The formula for a hexagonal number is `H(n) = n(2n - 1)`.
    - Let's look at the formula for a triangular number `T(m) = m(m+1)/2`.
    - If we set `m = 2n - 1`, then `T(2n-1) = (2n-1)((2n-1)+1)/2 = (2n-1)(2n)/2 = n(2n-1)`.
    - This is exactly the formula for `H(n)`.
    - This means that **every hexagonal number is also a triangular number**.

2.  **Simplified Problem**: Because of this relationship, the problem simplifies significantly. We no longer need to check for triangular numbers. We only need to find hexagonal numbers that are also pentagonal.

3.  **Algorithm**:
    - We know that `H(143) = 40755` is the first such number (after 1). We need to find the *next* one.
    - We can start generating hexagonal numbers with an index `n` starting from `144`.
    - For each hexagonal number `H` we generate, we need to check if it is also a pentagonal number.
    - The first number we find that satisfies this condition will be our answer.

4.  **Pentagonal Number Test**: To check if a number `x` is pentagonal, we can solve the formula `x = k(3k-1)/2` for `k`. Using the quadratic formula, we get `k = (1 + sqrt(1 + 24x)) / 6`. For `k` to be a positive integer, `1 + 24x` must be a perfect square, and `(1 + sqrt(1 + 24x))` must be divisible by 6. This gives us a fast and reliable test.
"""
import math

def is_pentagonal(x):
    """Checks if a number x is a pentagonal number."""
    if x <= 0:
        return False
    # A number is pentagonal if k = (1 + sqrt(1 + 24x)) / 6 is an integer.
    val = 1 + 24 * x
    sqrt_val = math.isqrt(val)
    if sqrt_val * sqrt_val != val:
        return False
    return (1 + sqrt_val) % 6 == 0

def solve():
    """
    Finds the next triangle number that is also pentagonal and hexagonal.
    """
    # We start from the index after H_143 = 40755
    n = 144
    
    while True:
        # Generate the next hexagonal number
        hexagonal_num = n * (2 * n - 1)
        
        # Check if it's also pentagonal (we already know it's triangular)
        if is_pentagonal(hexagonal_num):
            return hexagonal_num
        
        n += 1

if __name__ == "__main__":
    print(solve())
