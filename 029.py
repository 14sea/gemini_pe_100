"""
Project Euler Problem 29: Distinct powers

Problem:
Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
2^2=4,  2^3=8,  2^4=16,  2^5=32
3^2=9,  3^3=27,  3^4=81,  3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.

How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?

Solution Idea:
The problem asks for the number of *distinct* terms. A `set` is the perfect data structure in Python for this, as it automatically stores only unique elements.

1.  **Initialization**: Create an empty set to store the results of the `a^b` calculations.
2.  **Iteration**: Use nested loops to iterate through all possible integer values of `a` and `b`.
    - The outer loop will run for `a` from 2 to 100 (inclusive).
    - The inner loop will run for `b` from 2 to 100 (inclusive).
3.  **Calculation and Storage**: Inside the loops, calculate `a**b`. Python's integers can handle the very large numbers that will be generated. Add the result to the set. If the number is already in the set, it will not be added again.
4.  **Final Count**: After the loops have finished, the number of distinct terms is simply the size (length) of the set.
"""

def solve():
    """
    Calculates the number of distinct terms in the sequence a^b
    for 2 <= a <= 100 and 2 <= b <= 100.
    """
    distinct_terms = set()
    
    for a in range(2, 101):
        for b in range(2, 101):
            distinct_terms.add(a**b)
            
    return len(distinct_terms)

if __name__ == "__main__":
    print(solve())
