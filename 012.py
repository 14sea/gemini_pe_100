
# Question:
# The sequence of triangle numbers is generated by adding the natural numbers. So the $7$th triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
# $1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$
#
# Let us list the factors of the first seven triangle numbers:
# \begin{align}
# \mathbf 1 &\colon 1\\
# \mathbf 3 &\colon 1,3\\
# \mathbf 6 &\colon 1,2,3,6\\
# \mathbf{10} &\colon 1,2,5,10\\
# \mathbf{15} &\colon 1,3,5,15\\
# \mathbf{21} &\colon 1,3,7,21\\
# \mathbf{28} &\colon 1,2,4,7,14,28
# \end{align}
# We can see that $28$ is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Solution Ideas:
# The problem asks for the first triangle number that has over 500 divisors.
# A triangle number is the sum of natural numbers up to n, given by the formula T_n = n * (n + 1) / 2.
#
# To solve this, we need a function to count the number of divisors for a given number.
#
# Algorithm for counting divisors:
# For a number `num`, iterate from `i = 1` up to `sqrt(num)`.
# If `i` divides `num`, then `i` is a divisor.
# Also, `num / i` is a divisor.
# If `i * i == num`, then `i` and `num / i` are the same, so count only once.
# Otherwise, count both `i` and `num / i`.
#
# Main algorithm:
# 1. Initialize `n = 1` (for the first natural number).
# 2. Loop indefinitely:
#    a. Calculate the current triangle number: `triangle_number = n * (n + 1) // 2`.
#    b. Count the divisors of `triangle_number` using the `count_divisors` function.
#    c. If the count of divisors is greater than 500, print `triangle_number` and break the loop.
#    d. Increment `n` to calculate the next triangle number.
#
# The current solution implements this approach. The `count_divisors` function is efficient, and the main loop correctly generates triangle numbers and checks their divisor count.

def count_divisors(n):
    count = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            if n / i == i:
                count += 1
            else:
                count += 2
        i += 1
    return count

def solve():
    n = 1
    while True:
        triangle_number = n * (n + 1) // 2
        if count_divisors(triangle_number) > 500:
            print(triangle_number)
            break
        n += 1

solve()
