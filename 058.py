"""
Project Euler Problem 58: Spiral primes

Problem:
Starting with 1 and spiralling anticlockwise, a square spiral is formed. It is interesting to note that 8 out of the 13 numbers on the diagonals of a 7x7 spiral are prime.
If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?

Solution Idea:
We don't need to build the actual spiral. We can find a pattern for the numbers on the diagonals, similar to Problem 28, but for an anticlockwise spiral.

1.  **Diagonal Pattern**:
    - The spiral is built in layers. A spiral of side length `s` has `s-1` as the step size between its corners.
    - The center is 1.
    - Layer 1 (3x3 spiral, side length `s=3`, step `d=2`): Corners are 3, 5, 7, 9.
    - Layer 2 (5x5 spiral, side length `s=5`, step `d=4`): Corners are 13, 17, 21, 25.
    - Layer k (side length `s = 2k+1`, step `d = 2k`): The four corners are generated by adding the step `d` four times to the previous corner.

2.  **Primality Test**: We will be checking large numbers for primality. A standard `is_prime` function that checks for divisibility up to the square root of the number will be needed. Since the numbers can get large, a sieve is not practical for the entire range, so we'll test them one by one.

3.  **Algorithm**:
    a.  Initialize variables:
        - `prime_count = 0` (number of primes on diagonals)
        - `total_diagonal_numbers = 1` (starts with the '1' in the center)
        - `side_length = 1`
        - `current_number = 1`
    b.  Start a loop that continues indefinitely until the condition is met.
    c.  In each iteration of the loop, we add a new layer to the spiral:
        - Increment `side_length` by 2.
        - The step size for this layer is `side_length - 1`.
        - Generate the four new corner numbers by adding the step size to `current_number` four times.
        - For each of the four new corners, check if it's prime using our `is_prime` function. If it is, increment `prime_count`.
    d.  Update the total number of diagonal elements: `total_diagonal_numbers += 4`.
    e.  Calculate the current ratio: `ratio = prime_count / total_diagonal_numbers`.
    f.  Check if `ratio < 0.10`. If it is, we have found our answer. The side length at this point is the solution.
"""
import math

def is_prime(n):
    """
    Checks if a number is prime. Optimized for speed.
    """
    if n < 2: return False
    if n == 2 or n == 3: return True
    if n % 2 == 0 or n % 3 == 0: return False
    # Check divisibility for numbers of the form 6k +/- 1
    for i in range(5, int(math.sqrt(n)) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True

def solve():
    """
    Finds the side length of the square spiral for which the ratio of primes
    along both diagonals first falls below 10%.
    """
    prime_count = 0
    total_diagonal_numbers = 1
    side_length = 1
    current_number = 1
    
    while True:
        side_length += 2
        step = side_length - 1
        
        # Generate and check the four corners of the new layer
        for _ in range(4):
            current_number += step
            if is_prime(current_number):
                prime_count += 1
        
        total_diagonal_numbers += 4
        
        ratio = prime_count / total_diagonal_numbers
        
        if ratio < 0.10:
            return side_length

if __name__ == "__main__":
    print(solve())
